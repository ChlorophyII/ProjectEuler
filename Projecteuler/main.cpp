//
//  main.cpp
//  Projecteuler
//
//  Created by Shi Yue on 24/3/2016.
//  Copyright © 2016 Shi Yue. All rights reserved.
//

/*
 Catalogue:
 --ID--|--------------------Title--------------------|-----Answer-----|--Finish Date--
   2   | Even Fibonacci numbers                      | 4613732        |  3/24/2016
   3   | Larest Prime Factor                         | 6857           |  3/24/2016
   4   | Largest palindrome product                  | 906609         |  3/24/2016
   5   | Smallest multiple                           | 232792560      |  3/24/2016
   6   | Sum square difference                       | 25164150       |  3/24/2016
   7   | 10001st prime                               | 104743         |  3/24/2016
   8   | Largest product in a series                 | 23514624000    |  3/24/2016
   9   | Special Pythagorean triplet                 | 31875000       |  3/24/2016
   10  | Summation of primes                         | 142913828922   |  3/25/2016
   11  | 
 
 
*/

#include "problem10.hpp"

int main()
{
    run_problem10();
}







//=========================== Problem 11 ===========================
//Title: Largest product in a grid
/*
 Start date: 3/25/2016
 Finish date: 3/26/2016
 
 Description:
 In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
 
 08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
 
 The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
 
 What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
 */
//Solution:
/*
#include <iostream>
#include <fstream>

int main()
{
    using namespace std;
    int arr[20][20];
    ifstream fin("problem11.txt");
    for (int i = 0; i < 20; i++) {
        for (int j = 0; j < 20; j++){
            fin >> arr[i][j];
        }
    }
    fin.close();
    
    int maxProduct = 0, p;
    //vertical
    for (int i = 0; i < 20; i++) {
        for (int j = 0; j + 3 < 20; j++) {
            p = arr[i][j]*arr[i][j+1]*arr[i][j+2]*arr[i][j+3];
            maxProduct = ((p > maxProduct) ? p : maxProduct);
        }
    }
    //horizontal
    for (int i = 0; i + 3 < 20; i++) {
        for (int j = 0; j < 20; j++) {
            p = arr[i][j]*arr[i+1][j]*arr[i+2][j]*arr[i+3][j];
            maxProduct = ((p > maxProduct) ? p : maxProduct);
        }
    }
    //diagonal1
    for (int i = 0; i + 3 < 20; i++) {
        for (int j = 0; j + 3 < 20; j++) {
            p = arr[i][j]*arr[i+1][j+1]*arr[i+2][j+2]*arr[i+3][j+3];
            maxProduct = ((p > maxProduct) ? p : maxProduct);
        }
    }
    //diagonal2
    for (int i = 3; i < 20; i++) {
        for (int j = 0; j + 3 < 20; j++) {
            p = arr[i][j]*arr[i-1][j+1]*arr[i-2][j+2]*arr[i-3][j+3];
            maxProduct = ((p > maxProduct) ? p : maxProduct);
        }
    }
    std::cout << maxProduct;
    
}
*/

//=========================== Problem 12 ===========================
//Title: Highly divisible triangular number
/*
 Start date: 3/25/2016
 Finish date: 3/26/2016
 
 Description:
 The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 
 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 
 Let us list the factors of the first seven triangle numbers:
 
 1: 1
 3: 1,3
 6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28
 We can see that 28 is the first triangle number to have over five divisors.
 
 What is the value of the first triangle number to have over five hundred divisors?
 */
//Solution:
/*
#include <iostream>
#include <cmath>

void fillInDivisors(int divisors[], int num);

int main()
{
    int divisors[1000];
    int add = 1, num = 0;
    
    for (int i = 0; i < 1000; i++) {
        divisors[i] = 0;
    }
    
    while (1) {
        num += add;
        fillInDivisors(divisors, num);
        add++;
        if (divisors[499] != 0)
        {
            break;
        }
    }
    
    std::cout << num;
}
void fillInDivisors(int divisors[], int num)
{
    int j = 0;
    if (pow(int(sqrt(num)),2) == num)
    {
        divisors[j++] = sqrt(num);
    }
    for (int i = 1; i < sqrt(num); i++) {
        if (num % i == 0) {
            divisors[j++] = i;
            divisors[j++] = num/i;
        }
    }
}
*/

//=========================== Problem 13 ===========================
//Title: Large sum
/*
 Start date: 3/25/2016
 Finish date: 3/26/2016
 
 Description:
 Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
 
 37107287533902102798797998220837590246510135740250
 46376937677490009712648124896970078050417018260538
 74324986199524741059474233309513058123726617309629
 91942213363574161572522430563301811072406154908250
 23067588207539346171171980310421047513778063246676
 89261670696623633820136378418383684178734361726757
 28112879812849979408065481931592621691275889832738
 44274228917432520321923589422876796487670272189318
 47451445736001306439091167216856844588711603153276
 70386486105843025439939619828917593665686757934951
 62176457141856560629502157223196586755079324193331
 64906352462741904929101432445813822663347944758178
 92575867718337217661963751590579239728245598838407
 58203565325359399008402633568948830189458628227828
 80181199384826282014278194139940567587151170094390
 35398664372827112653829987240784473053190104293586
 86515506006295864861532075273371959191420517255829
 71693888707715466499115593487603532921714970056938
 54370070576826684624621495650076471787294438377604
 53282654108756828443191190634694037855217779295145
 36123272525000296071075082563815656710885258350721
 45876576172410976447339110607218265236877223636045
 17423706905851860660448207621209813287860733969412
 81142660418086830619328460811191061556940512689692
 51934325451728388641918047049293215058642563049483
 62467221648435076201727918039944693004732956340691
 15732444386908125794514089057706229429197107928209
 55037687525678773091862540744969844508330393682126
 18336384825330154686196124348767681297534375946515
 80386287592878490201521685554828717201219257766954
 78182833757993103614740356856449095527097864797581
 16726320100436897842553539920931837441497806860984
 48403098129077791799088218795327364475675590848030
 87086987551392711854517078544161852424320693150332
 59959406895756536782107074926966537676326235447210
 69793950679652694742597709739166693763042633987085
 41052684708299085211399427365734116182760315001271
 65378607361501080857009149939512557028198746004375
 35829035317434717326932123578154982629742552737307
 94953759765105305946966067683156574377167401875275
 88902802571733229619176668713819931811048770190271
 25267680276078003013678680992525463401061632866526
 36270218540497705585629946580636237993140746255962
 24074486908231174977792365466257246923322810917141
 91430288197103288597806669760892938638285025333403
 34413065578016127815921815005561868836468420090470
 23053081172816430487623791969842487255036638784583
 11487696932154902810424020138335124462181441773470
 63783299490636259666498587618221225225512486764533
 67720186971698544312419572409913959008952310058822
 95548255300263520781532296796249481641953868218774
 76085327132285723110424803456124867697064507995236
 37774242535411291684276865538926205024910326572967
 23701913275725675285653248258265463092207058596522
 29798860272258331913126375147341994889534765745501
 18495701454879288984856827726077713721403798879715
 38298203783031473527721580348144513491373226651381
 34829543829199918180278916522431027392251122869539
 40957953066405232632538044100059654939159879593635
 29746152185502371307642255121183693803580388584903
 41698116222072977186158236678424689157993532961922
 62467957194401269043877107275048102390895523597457
 23189706772547915061505504953922979530901129967519
 86188088225875314529584099251203829009407770775672
 11306739708304724483816533873502340845647058077308
 82959174767140363198008187129011875491310547126581
 97623331044818386269515456334926366572897563400500
 42846280183517070527831839425882145521227251250327
 55121603546981200581762165212827652751691296897789
 32238195734329339946437501907836945765883352399886
 75506164965184775180738168837861091527357929701337
 62177842752192623401942399639168044983993173312731
 32924185707147349566916674687634660915035914677504
 99518671430235219628894890102423325116913619626622
 73267460800591547471830798392868535206946944540724
 76841822524674417161514036427982273348055556214818
 97142617910342598647204516893989422179826088076852
 87783646182799346313767754307809363333018982642090
 10848802521674670883215120185883543223812876952786
 71329612474782464538636993009049310363619763878039
 62184073572399794223406235393808339651327408011116
 66627891981488087797941876876144230030984490851411
 60661826293682836764744779239180335110989069790714
 85786944089552990653640447425576083659976645795096
 66024396409905389607120198219976047599490197230297
 64913982680032973156037120041377903785566085089252
 16730939319872750275468906903707539413042652315011
 94809377245048795150954100921645863754710598436791
 78639167021187492431995700641917969777599028300699
 15368713711936614952811305876380278410754449733078
 40789923115535562561142322423255033685442488917353
 44889911501440648020369068063960672322193204149535
 41503128880339536053299340368006977710650566631954
 81234880673210146739058568557934581403627822703280
 82616570773948327592232845941706525094512325230608
 22918802058777319719839450180888072429661980811197
 77158542502016545090413245809786882778948721859617
 72107838435069186155435662884062257473692284509516
 20849603980134001723930671666823555245252804609722
 53503534226472524250874054075591789781264330331690
 */
//Solution:
/*
#include <iostream>
#include <fstream>
#include <math.h>
int main()
{
    using namespace std;
    ifstream fin("problem13.txt");
    string str[100];
    for (int i = 0; i < 100; i++) {
        fin >> str[i];
    }
    fin.close();
    int sum[12];
    for (int i = 0; i < 12; i++) {
        sum[i] = 0;
        for (int j = 0; j < 100; j++) {
            sum[i] += str[j].at(i)-'0';
        }
    }
    
    long long totalSum = 0;
    for (int i = 0; i < 12; i++) {
        totalSum += sum[11-i] * pow(10,i);
    }
    std::cout << totalSum;
}
*/

//=========================== Problem 14 ===========================
//Title: Longest Collatz sequence
/*
 Start date: 3/25/2016
 Finish date: 3/29/2016
 
 Description:
 The following iterative sequence is defined for the set of positive integers:
 
 n → n/2 (n is even)
 n → 3n + 1 (n is odd)
 
 Using the rule above and starting with 13, we generate the following sequence:
 
 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
 It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
 
 Which starting number, under one million, produces the longest chain?
 
 NOTE: Once the chain starts the terms are allowed to go above one million.
 */
//Solution:
/*
 This problem is solved by brute force, and the code is written in matlab.
 The function seqLength is simply written in recursive form, which may cause over flow or exceed recursion limit.
 The answer is 837799, and the sequence length is 524.
*/
/*
 //This is a solution provided by others.
 //Link: https://projecteuler.net/quote_post=6-h9f6vJ6Vo2d8HzAz
#include <stdio.h>

int main(int argc, char **argv)
{
    int longest = 0;
    int terms = 0;
    int i;
    unsigned long j;
    
    for (i = 1; i <= 1000000; i++)
    {
        j = i;
        int this_terms = 1;
        
        while (j != 1)
        {
            this_terms++;
            
            if (this_terms > terms)
            {
                terms = this_terms;
                longest = i;
            }
            
            if (j % 2 == 0)
            {
                j = j / 2;
            }
            else
            {
                j = 3 * j + 1;
            }
        }
    }
    
    printf("longest: %d (%d)\n", longest, terms);
    return 0;
}
*/

//=========================== Problem 16 ===========================
//Title: Power digit sum
/*
 Start date: 3/25/2016
 Finish date: 3/26/2016
 
 Description:
 2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
 
 What is the sum of the digits of the number 2^1000?
 */
//Solution:
/*
#include <iostream>

int main()
{
    char arr[331];
    for (int i = 0; i < 331; i++) {
        arr[i] = '0';
    }
    arr[0] = '1';
    bool addOne = false;
    for (int i = 0; i < 1000; i++) {
        for (int j = 0; j < 330; j++) {
            if (addOne) {
                addOne = (arr[j]-'0')*2/10;
                arr[j] = (arr[j]-'0')*2%10+'1';
            }
            else
            {
                addOne = (arr[j]-'0')*2/10;
                arr[j] = (arr[j]-'0')*2%10+'0';
            }
        }
    }
    int sum = 0;
    for (int i = 0; i < 331; i++) {
        sum += arr[i]-'0';
    }
    std::cout << sum;
}
*/

//=========================== Problem 18 ===========================
//Title: Maximum path sum I
/*
 Start date: 3/25/2016
 Finish date: 3/26/2016
 
 Description:
 By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
 
 3
 7 4
 2 4 6
 8 5 9 3
 
 That is, 3 + 7 + 4 + 9 = 23.
 
 Find the maximum total from top to bottom of the triangle below:
 
 75
 95 64
 17 47 82
 18 35 87 10
 20 04 82 47 65
 19 01 23 75 03 34
 88 02 77 73 07 63 67
 99 65 04 28 06 16 70 92
 41 41 26 56 83 40 80 70 33
 41 48 72 33 47 32 37 16 94 29
 53 71 44 65 25 43 91 52 97 51 14
 70 11 33 28 77 73 17 78 39 68 17 57
 91 71 52 38 17 14 91 43 58 50 27 29 48
 63 66 04 68 89 53 67 30 73 16 69 87 40 31
 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
 
 NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)
 */
//Solution:
/*
#include <iostream>
#include <fstream>
#include <cmath>

int main()
{
    using namespace std;
    int *a, cnt = 0, size = 100;
    a = (int *)malloc(100 * sizeof(int));
    
    ifstream fin("problem 18.txt");
    while (!fin.eof()) {
        fin >> a[cnt++];
        if (cnt == size) {
            a = (int *)realloc(a, (100 + size)*sizeof(int));
            size += 100;
        }
    }
    int row = (sqrt(1+8*cnt)-1)/2;
    for (int r = row; r > 1; r--) {
        int st = r*(r-1)/2;
        for (int c = 0; c < r-1; c++) {
            a[st+c-r+1] += (a[st+c] > a[st+c+1]) ? (a[st+c]):(a[st+c+1]);
        }
    }
    std::cout << a[0];
}
*/

//=========================== Problem 19 ===========================
//Title: Counting Sundays
/*
 Start date: 3/25/2016
 Finish date: 4/4/2016
 
 Description:
 You are given the following information, but you may prefer to do some research for yourself.
 
 1 Jan 1900 was a Monday.
 Thirty days has September,
 April, June and November.
 All the rest have thirty-one,
 Saving February alone,
 Which has twenty-eight, rain or shine.
 And on leap years, twenty-nine.
 A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
 How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
 */
//Solution:
/*
 //There is a little bit problem, but lukily, the result is right.
#include <iostream>

int getMonthDay(int month, int year);

int main()
{
    int weekday = 1;
    int cnt = 0;
    for (int year = 1900; year <= 2000; year++) {
        for (int month = 1; month <= 12; month++) {
            weekday = (weekday + getMonthDay(month, year) - 1) % 7 + 1;
            if (weekday == 7) {
                cnt++;
            }
        }
    }
    weekday = 1;
    for (int month = 1; month <= 12; month++) {
        weekday = (weekday + getMonthDay(month, 1900) - 1) % 7 + 1;
        if (weekday == 7) {
            cnt--;
        }
    }
    std::cout << cnt;
}

int getMonthDay(int month, int year)
{
    if (month == 1 || month == 3 || month == 5|| month == 7 || month == 8 || month == 10 || month == 12) {
        return 31;
    }
    else if (month == 2){
        if (year % 100 == 0) {
            if (year % 400 == 0) {
                return 29;
            }
            else
                return 28;
        }
        else if (year % 4 == 0) {
            return 29;
        }
        else{
            return 28;
        }
    }
    else
        return 30;
}
*/

//=========================== Problem 20 ===========================
//Title: Factorial digit sum
/*
 Start date: 3/29/2016
 Finish date: 4/3/2016
 
 Description:
 n! means n × (n − 1) × ... × 3 × 2 × 1
 
 For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
 and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
 
 Find the sum of the digits in the number 100!
 */
//Solution:
/*
#include <iostream>
#include "BIGNUM.hpp"
//Set __BIGNUMLENGTH = 200

int main()
{
    BIGNUM a;
    a.add(1);
    for (int i = 1; i < 101; i++) {
        a.mult(i);
//        a.disp();
//        std::cout << "\n" << i << "\n\n";
    }
    int sum = 0;
    a.disp();
    for (int i = 0; i < a.getNumDigits(); i++) {
        sum += a.getDigit(i);
    }
    std::cout << "\n" << sum << "\n";
}
*/

//=========================== Problem 21 ===========================
//Title: Amicable numbers
/*
 Start date: 4/4/2016
 Finish date: 4/4/2016
 
 Description:
 Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
 If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.
 
 For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.
 
 Evaluate the sum of all the amicable numbers under 10000.
 */
//Solution:
/*
//There is some small problem, but luckily, the result is correct.
#include <iostream>

int sumOfProperDivisors(int a);

int main()
{
    int sum = 0;
    int sumOfPD[10001];
    bool isAmicableNum[10001];
    sumOfPD[0] = -1;
    for (int i = 1; i < 10001; i++) {
        sumOfPD[i] = sumOfProperDivisors(i);
    }
    for (int i = 1; i < 10001; i++) {
        if (sumOfPD[i] > 10000 || sumOfPD[i] == i) {
            continue;
        }
        if (sumOfPD[i] < 10000 && sumOfPD[sumOfPD[i]] == i) {
            isAmicableNum[i] = true;
        }
        else {
            isAmicableNum[i] = false;
        }
    }
    for (int i = 1; i < 10001; i++) {
        if (isAmicableNum[i]) {
            sum += i;
        }
    }
    std::cout << sum;
}

int sumOfProperDivisors(int a)
{
    int sum = 0;
    for (int i = 1; i < a; i++) {
        if (a % i == 0) {
            sum += i;
        }
    }
    return sum;
}
*/

//=========================== Problem 22 ===========================
//Title: Names scores
/*
 Start date: 4/4/2016
 Finish date: 4/7/2016
 
 Description:
 Using names.txt (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.
 
 For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.
 
 What is the total of all the name scores in the file?
 */
//Solution:
/*
#include <iostream>
#include <fstream>
#include <string>

int letterScore(char ch)
{
    return ch - 'A' + 1;
}

int strScore(std::string str)
{
    int score = 0;
    for (int i = 0; i < str.length(); i++) {
        score += letterScore(str.at(i));
    }
    return score;
}

void quickSort(std::string *array, int n);

int partition(std::string *array, int n);

int main()
{
    using namespace std;
    ifstream fin("problem 22.txt");
    string names[5163];//There are 5163 names;
    int i = 0;
    char ch;
    while (!fin.eof()) {
        fin >> ch;
        if ( ch == ',') {
            i++;
        }
        else if (ch != '"') {
            names[i] = names[i] + ch;
        }
    }
    i++;
    
    quickSort(names, i);
    long total = 0;
    for (int j = 0; j < i; j++) {
        total += (j+1) * strScore(names[j]);
    }
    cout << total << " haha";
}

int partition(std::string *array, int n)
{
    int lh = 1, rh;
    std::string pivot, temp;
    pivot = array[0];
    rh = n-1;
    do {
        while (lh < rh && array[rh] >= pivot) {
            rh--;
        }
        while (lh < rh && array[lh] <= pivot) {
            lh++;
        }
        if (lh != rh) {
            temp = array[lh];
            array[lh] = array[rh];
            array[rh] = temp;
        }
    } while (lh != rh);
    if (array[lh] >= pivot) {
        return 0;
    }
    array[0] = array[lh];
    array[lh] = pivot;
    return lh;
}

void quickSort(std::string *array, int n)
{
    int p;
    if (n > 1) {
        p = partition(array, n);
        quickSort(array, p);
        quickSort(array + p + 1, n - p - 1);
    }
}
*/

//=========================== Problem 23 ===========================
//Title: Non-abundant sums
/*
 Start date: 4/7/2016
 Finish date: 4/7/2016
 
 Description:
 A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.
 
 A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.
 
 As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.
 
 Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.
 */
//Solution:
/*
#include <iostream>

bool isAbundant(int a);
bool isSumOfAbdNumbers(int a, bool *isAbd);

int main()
{
    bool isAbd[28123];
    for (int i = 1; i < 28123; i++) {
        isAbd[i] = isAbundant(i);
    }
    long sum = 0;
    for (int i = 1; i < 28123; i++) {
        if (!isSumOfAbdNumbers(i, isAbd)) {
            sum += i;
        }
    }
    std::cout << sum;
}

bool isAbundant(int a)
{
    int sum = 0;
    for (int i = 1; i <= a/2; i++) {
        if (a % i == 0) {
            sum += i;
        }
    }
    if (sum > a)
        return true;
    else
        return false;
}

bool isSumOfAbdNumbers(int a, bool *isAbd)
{
    for (int i = 1; i <= a/2 ; i++) {
        if (isAbd[i] && isAbd[a-i]) {
            return true;
        }
    }
    return false;
}
*/

//=========================== Problem 25 ===========================
//Title: 1000-digit Fibonacci number
/*
 Start date: 3/29/2016
 Finish date: 3/29/2016
 
 Description:
 The Fibonacci sequence is defined by the recurrence relation:
 
 Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
 Hence the first 12 terms will be:
 
 F1 = 1
 F2 = 1
 F3 = 2
 F4 = 3
 F5 = 5
 F6 = 8
 F7 = 13
 F8 = 21
 F9 = 34
 F10 = 55
 F11 = 89
 F12 = 144
 The 12th term, F12, is the first term to contain three digits.
 
 What is the index of the first term in the Fibonacci sequence to contain 1000 digits?
 */
//Solution:
/*
#include <iostream>
#include <cmath>

const long double Phi = (1+sqrt(5))/2, phi = (1-sqrt(5))/2;
const long double sqrt5 = sqrt(5);
int main()
{
    int i = 1;
    for (;logl((powl(Phi,i)-pow(phi,i))/sqrt5)/logl(10.0) < 999 ; i++) {
    }
    std::cout << (powl(Phi,i)-pow(phi,i))/sqrt5;
    std::cout << i;
}
*/

//=========================== Problem 26 ===========================
//Title: Reciprocal cycles
/*
 Start date: 4/8/2016
 Finish date: 4/8/2016
 
 Description:
 A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:
 
 1/2	= 	0.5
 1/3	= 	0.(3)
 1/4	= 	0.25
 1/5	= 	0.2
 1/6	= 	0.1(6)
 1/7	= 	0.(142857)
 1/8	= 	0.125
 1/9	= 	0.(1)
 1/10	= 	0.1
 Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.
 
 Find the value of d < 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.
 */
//Solution:
/*
#include <iostream>

int reciprocalCycleLength(int a);

int main()
{
    int d = 0, length = 0;
    for (int i = 1; i < 1000; i++) {
        if (reciprocalCycleLength(i) > length) {
            length = reciprocalCycleLength(i);
            d = i;
        }
    }
    std::cout << "d = " << d << "\nlength = " << length << "\n";
}

int reciprocalCycleLength(int a)
{
    int dividend = 1;
    for (int i = 0; i < 50; i++) {
        while (dividend < a) {
            dividend *= 10;
        }
        int j;
        for (j = 0; dividend - (j+1) * a >= 0; j++) {
        }
        dividend -= j * a;
        if (dividend == 0) {
            return 0;
        }
    }
    int r = dividend;
    int cnt = 0;
    while (cnt == 0 || r != dividend) {
        if (dividend < a) {
            dividend *= 10;
        }
        while (dividend < a) {
            dividend *= 10;
            cnt++;
        }
        int j;
        for (j = 0; dividend - (j+1) * a >= 0; j++) {
        }
        dividend -= j * a;
        cnt++;
    }
    return cnt;
}
*/

//=========================== Problem 28 ===========================
//Title: Number spiral diagonals
/*
 Start date: 4/8/2016
 Finish date:
 
 Description:
 Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:
 
 21 22 23 24 25
 20  7  8  9 10
 19  6  1  2 11
 18  5  4  3 12
 17 16 15 14 13
 
 It can be verified that the sum of the numbers on the diagonals is 101.
 
 What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?
 */
//Solution:
/*
#include <iostream>

int main()
{
    long a = 1, sum = 1;
    for (int i = 2; i <= 1000; i += 2) {
        a += i;
        sum += a;
        a += i;
        sum += a;
        a += i;
        sum += a;
        a += i;
        sum += a;
    }
    std::cout << sum;
}
*/

//=========================== Problem 29 ===========================
//Title: Quadratic primes
/*
 Start date: 4/9/2016
 Finish date: 4/9/2016
 
 Description:
 Euler discovered the remarkable quadratic formula:
 
 n^2 + n + 41
 
 It turns out that the formula will produce 40 primes for the consecutive values n = 0 to 39. However, when n = 40, 40^2 + 40 + 41 = 40(40 + 1) + 41 is divisible by 41, and certainly when n = 41, 41^2 + 41 + 41 is clearly divisible by 41.
 
 The incredible formula  n^2 − 79n + 1601 was discovered, which produces 80 primes for the consecutive values n = 0 to 79. The product of the coefficients, −79 and 1601, is −126479.
 
 Considering quadratics of the form:
 
 n² + an + b, where |a| < 1000 and |b| < 1000
 
 where |n| is the modulus/absolute value of n
 e.g. |11| = 11 and |−4| = 4
 Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n = 0.
 */
//Solution:
/*
#include <iostream>
#include <fstream>
#include <cmath>

int locateGreatestPrime(int a, int primes[]);

int main()
{
    using namespace std;
    int *primes = (int *)malloc(100008 * sizeof(int));
    ifstream fin("primes.txt");
    for (int i = 0; i < 100008; i++) {
        fin >> primes[i];
    }
    fin.close();
    
    int limit = locateGreatestPrime(1000, primes);
    
    int product = 0;
    int result, maxNum = 0;
    
    for (int i = 0; i <= limit; i++) {
        for (int j = -999; j < 1000; j++) {
            int n = 0;
            result = n * (n + j) + primes[i];
            if (result < 2) {
                continue;
            }
            while (result == primes[locateGreatestPrime(result, primes)]) {
                n++;
                result = n * (n + j) + primes[i];
                if (result < 2) {
                    break;
                }
            }
            if (n > maxNum) {
                maxNum = n;
                product = primes[i] * j;
            }
        }
    }
    
    for (int i = 0; i <= limit; i++) {
        for (int j = -999; j < 1000; j++) {
            int n = 0;
            result = n * (n + j) - primes[i];
            if (result < 2) {
                continue;
            }
            while (result == primes[locateGreatestPrime(result, primes)]) {
                n++;
                result = n * (n + j) - primes[i];
                if (result < 2) {
                    break;
                }
            }
            if (n > maxNum) {
                maxNum = n;
                product = primes[i] * j;
            }
        }
    }
    
    cout << product;
}

int locateGreatestPrime(int a, int primes[])
{
    //return i, where primes[i] <= a;
    int i = a / log(a);
    while (primes[i] < a) {
        i++;
    }
    while (primes[i] > a) {
        i--;
    }
    return i;
}
*/

//=========================== Problem 30 ===========================
//Title: Digit fifth powers
/*
 Start date: 4/8/2016
 Finish date: 4/8/2016
 
 Description:
 Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:
 
 1634 = 1^4 + 6^4 + 3^4 + 4^4
 8208 = 8^4 + 2^4 + 0^4 + 8^4
 9474 = 9^4 + 4^4 + 7^4 + 4^4
 As 1 = 1^4 is not a sum it is not included.
 
 The sum of these numbers is 1634 + 8208 + 9474 = 19316.
 
 Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.
 */
//Solution:
/*
#include <iostream>
#include <cmath>

int main()
{
    int a, b, c, d, e, f;
    double m;
    long sum = 0;
    for (int i = 2; i < 1000000; i++) {
        a = i % 10;
        b = (i / 10) % 10;
        c = (i / 100) % 10;
        d = (i / 1000) % 10;
        e = (i / 10000) % 10;
        f = (i / 100000) % 10;
        m = pow(a, 5) + pow(b, 5) + pow(c, 5) + pow(d, 5) + pow(e, 5) + pow(f, 5);
        if (m < i + 0.5 && m > i - 0.5) {
            sum += i;
            std::cout << i << "\n";
        }
    }
    std::cout << sum;
}
*/

//=========================== Problem 31 ===========================
//Title: Coin sums
/*
 Start date: 4/8/2016
 Finish date: 4/8/2016
 
 Description:
 In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:
 
 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).
 It is possible to make £2 in the following way:
 
 1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
 How many different ways can £2 be made using any number of coins?
 */
//Solution:
/*
#include <iostream>

int locate(int denomination);

int main()
{
    int denomination[8] = {1, 2, 5, 10, 20, 50, 100, 200};
    int arr[200];
    for (int i = 0; i < 200; i++) {
        arr[i] = 0;
    }
    int cnt = 1;
    arr[0] = 200;
    while (arr[0] != 1) {
        int j, residue = 0;
        for ( j = 199; j > -1; j--) {
            if (arr[j] == 1) {
                arr[j] = 0;
                residue++;
            }
            else if (arr[j] > 1)
                break;
        }
        
        residue += arr[j] - denomination[locate(arr[j]) - 1];
        arr[j] = denomination[locate(arr[j]) - 1];
        int ub = arr[j];
        while (residue > 0) {
            if (residue >= ub) {
                arr[++j] = ub;
                residue -= ub;
            }
            else {
                ub = denomination[locate(ub)-1];
            }
        }
        cnt++;
    }
    std::cout << cnt;
    
}

int locate(int denomination)
{
    switch (denomination) {
        case 200:
            return 7;
        case 100:
            return 6;
        case 50:
            return 5;
        case 20:
            return 4;
        case 10:
            return 3;
        case 5:
            return 2;
        case 2:
            return 1;
        case 1:
            return 0;
        default:
            return -1;
    }
}
*/

//=========================== Problem 34 ===========================
//Title: Digit factorials
/*
 Start date: 4/3/2016
 Finish date: 4/3/2016
 
 Description:
 145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.
 
 Find the sum of all numbers which are equal to the sum of the factorial of their digits.
 
 Note: as 1! = 1 and 2! = 2 are not sums they are not included.
 */
//Solution:
/*
#include <iostream>

//Note, 9! * 7 = 2540160, which means 2540160 is the upper bound of such numbers.

int oneDigitFactorial(int a);

int main()
{
    long sum = 0;
    int a, b;
    for (int i = 3; i < 2540160; i++)
    {
        a = i;
        b = 0;
        while (a > 0) {
            b += oneDigitFactorial(a % 10);
            a /= 10;
        }
        if (i == b)
            sum += i;
    }
    std::cout << sum;
}

int oneDigitFactorial(int a)
{
    switch (a) {
        case 0:
            return 1;
        case 1:
            return 1;
        case 2:
            return 2;
        case 3:
            return 6;
        case 4:
            return 24;
        case 5:
            return 120;
        case 6:
            return 720;
        case 7:
            return 5040;
        case 8:
            return 40320;
        case 9:
            return 362880;
        default:
            break;
    }
    return 0;
}
*/

//=========================== Problem 56 ===========================
//Title: Powerful digit sum
/*
 Start date: 4/3/2016
 Finish date: 4/3/2016
 
 Description:
 A googol (10^100) is a massive number: one followed by one-hundred zeros; 100^100 is almost unimaginably large: one followed by two-hundred zeros. Despite their size, the sum of the digits in each number is only 1.
 
 Considering natural numbers of the form, ab, where a, b < 100, what is the maximum digital sum?
 */
//Solution:
/*
#include <iostream>
#include "BIGNUM.hpp"
//Set __BIGNUMLENGTH = 200

int main()
{
    int maxDigitalSum = 0;
    for (int a = 1; a < 10; a++) {
        for (int b = 1; b < 10; b++) {
            BIGNUM bn;
            bn.add(a);
            bn.pow(b);
            maxDigitalSum = (maxDigitalSum > bn.getDigitSum()) ? maxDigitalSum:bn.getDigitSum();
        }
    }
    std::cout << maxDigitalSum;
}
*/

//=========================== Problem 63 ===========================
//Title: Powerful digit counts
/*
 Start date: 4/3/2016
 Finish date: 4/3/2016
 
 Description:
 The 5-digit number, 16807=7^5, is also a fifth power. Similarly, the 9-digit number, 134217728=8^9, is a ninth power.
 
 How many n-digit positive integers exist which are also an nth power?
 */
//Solution:
/*
#include <iostream>
#include <cmath>

int main()
{
    //Note that even using long long, it will overflow.
//    int cnt = 0;
//     lb, ub, p;
//    for (int i = 0; i < 25; i++) {
//        for (int j = 1; j < 10; j++) {
//            lb = pow(10, i-1) - 1;
//            ub = pow(10, i);
//            p = pow(j, i);
////            std::cout << lb << " " << ub << " " << p << "\n";
//            if (lb < p && p < ub)
//            {
//                std::cout << j << " " << i << " " << ++cnt << " " << p << "\n";
//            }
//        }
//    }
//    for (int i = 1; i < 10; i++) {
//        for (int j = -1; j > -10; j--) {
//            ub = -(pow(10, i-1) - 1);
//            lb = -pow(10, i);
//            p = pow(j, i);
//            if (lb < p && p < ub)
//            {
//                std::cout << j << " " << i << " " << ++cnt << " " << p << "\n";
//            }
//        }
//    }
    int cnt = 0;
    for (int i = 1; i < 25; i++) {
        cnt += 10 - ceil(pow(10, 1 - 1.0/i));
    }
    std::cout << cnt;
}
*/
 
//=========================== Problem # ===========================
//Title:
/*
 Start date:
 Finish date:
 
 Description:
 
 */
//Solution:

//=========================== Problem 67 ===========================
//Title: Maximum path sum II
/*
 Start date: 3/26/2016
 Finish date: 3/26/2016
 
 Description:
 By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
 
 3
 7 4
 2 4 6
 8 5 9 3
 
 That is, 3 + 7 + 4 + 9 = 23.
 
 Find the maximum total from top to bottom in triangle.txt (right click and 'Save Link/Target As...'), a 15K text file containing a triangle with one-hundred rows.
 
    https://projecteuler.net/project/resources/p067_triangle.txt
 
 NOTE: This is a much more difficult version of Problem 18. It is not possible to try every route to solve this problem, as there are 2^99 altogether! If you could check one trillion (10^12) routes every second it would take over twenty billion years to check them all. There is an efficient algorithm to solve it. ;o)
 */
//Solution:
/*
#include <iostream>
#include <fstream>
#include <cmath>

int main()
{
    using namespace std;
    int *a, cnt = 0, size = 100;
    a = (int *)malloc(100 * sizeof(int));
    
    ifstream fin("problem 67.txt");
    while (!fin.eof()) {
        fin >> a[cnt++];
        if (cnt == size) {
            a = (int *)realloc(a, (100 + size)*sizeof(int));
            size += 100;
        }
    }
    int row = (sqrt(1+8*cnt)-1)/2;
    for (int r = row; r > 1; r--) {
        int st = r*(r-1)/2;
        for (int c = 0; c < r-1; c++) {
            a[st+c-r+1] += (a[st+c] > a[st+c+1]) ? (a[st+c]):(a[st+c+1]);
        }
    }
    std::cout << a[0];
}
*/

//=========================== Problem 69 ===========================
//Title: Totient maximum
/*
 Start date: 4/8/2016
 Finish date: 4/8/2016
 
 Description:
 Euler's Totient function, φ(n) [sometimes called the phi function], is used to determine the number of numbers less than n which are relatively prime to n. For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, φ(9)=6.
 
 n	Relatively Prime	φ(n)	n/φ(n)
 2	1                   1       2
 3	1,2                 2       1.5
 4	1,3                 2       2
 5	1,2,3,4             4       1.25
 6	1,5                 2       3
 7	1,2,3,4,5,6         6       1.1666...
 8	1,3,5,7             4       2
 9	1,2,4,5,7,8         6       1.5
 10	1,3,7,9             4       2.5
 It can be seen that n=6 produces a maximum n/φ(n) for n ≤ 10.
 
 Find the value of n ≤ 1,000,000 for which n/φ(n) is a maximum.
 */
//Solution:
/*
 //Problem 243 is a much harder version of this problem.
#include <iostream>
#include <fstream>
#include <cmath>
#include <ctime>

int locateGreatestPrime(int a, int primes[]);
int eulerPhi(int n, int primes[]);


int main()
{
    clock_t start = clock();
    
    using namespace std;
    int *primes = (int *)malloc(100008 * sizeof(int));
    ifstream fin("primes.txt");
    for (int i = 0; i < 100008; i++) {
        fin >> primes[i];
    }
    fin.close();
    double ratio, maxRatio = 0;
    int maxIdx = 1;
    for (int i = 4; i <= 1000000; i++) {
        ratio = i / double(eulerPhi(i, primes));
//        cout << "i = " << i << " ratio = " << ratio << " phi = " << eulerPhi(i, primes) << "\n";
        if (ratio > maxRatio) {
            maxRatio = ratio;
            maxIdx = i;
        }
    }
    cout << "Number with max ratio: " << maxIdx << "\nRatio: " << maxRatio << "\n";
    cout << "Time consumed: " << double(clock() - start)/CLOCKS_PER_SEC << "s\n";
}

int eulerPhi(int n, int primes[])
{
    int primeFactors[10];
    for (int i = 0; i < 10; i++) {
        primeFactors[i] = 0;
    }
    
    int IDX = locateGreatestPrime(n/2, primes);
    int numPrimeFactors = 0;
    for (int i = 0; i <= IDX; i++) {
        if (n % primes[i] == 0) {
            primeFactors[numPrimeFactors++] = primes[i];
        }
    }
    
    int phi = n;
    if (numPrimeFactors == 0) {
        return n-1;
    }
    for (int i = 0; i < numPrimeFactors; i++) {
        phi = (phi/primeFactors[i]) * (primeFactors[i]-1);
    }
    return phi;
}

int locateGreatestPrime(int a, int primes[])
{
    //return i, where primes[i] <= a;
    int i = a / log(a);
    while (primes[i] < a) {
        i++;
    }
    while (primes[i] > a) {
        i--;
    }
    return i;
}
*/

//=========================== Problem 76 ===========================
//Title: Counting summations
/*
 Start date: 4/3/2016
 Finish date: 4/3/2016
 
 Description:
 It is possible to write five as a sum in exactly six different ways:
 
 4 + 1
 3 + 2
 3 + 1 + 1
 2 + 2 + 1
 2 + 1 + 1 + 1
 1 + 1 + 1 + 1 + 1
 
 How many different ways can one hundred be written as a sum of at least two positive integers?
 */
//Solution:
/*
#include <iostream>

int waysWithUB(int a, int ub);

int main()
{
    using namespace std;
    cout << waysWithUB(100, 99);
}

int waysWithUB(int a, int ub)
{
    if (a < 2) {
        return 1;
    }
    
    int residue;
    int cnt = 0;
    for (int i = (a < ub) ? a:ub; i > 0; i--) {
        residue = a - i;
        cnt += waysWithUB(residue, i);
    }
    return cnt;
}
*/

//=========================== Problem 77 ===========================
//Title: Prime summations
/*
 Start date: 4/3/2016
 Finish date: 4/3/2016
 
 Description:
 It is possible to write ten as the sum of primes in exactly five different ways:
 
 7 + 3
 5 + 5
 5 + 3 + 2
 3 + 3 + 2 + 2
 2 + 2 + 2 + 2 + 2
 
 What is the first value which can be written as the sum of primes in over five thousand different ways?
 */
//Solution:
/*
#include <iostream>
#include <fstream>
#include <cmath>

int locateGreatestPrime(int a, int primes[]);

int waysWithUB(int a, int ub, int primes[]);

int main()
{
    using namespace std;
    int *primes = (int *)malloc(100008 * sizeof(int));
    ifstream fin("primes.txt");
    for (int i = 0; i < 100008; i++) {
        fin >> primes[i];
    }
    fin.close();
    
    int i = 1;
    while (waysWithUB(i, i, primes) < 5000000) {
        i++;
    }
    cout << i;
//    for (int i = 0; i < 100; i++) {
//        std::cout << i << " " << waysWithUB(i, i, primes) << "\n";
//    }
}

int locateGreatestPrime(int a, int primes[])
{
    //return i, where primes[i] <= a;
    int i = a / log(a);
    while (primes[i] < a) {
        i++;
    }
    while (primes[i] > a) {
        i--;
    }
    return i;
}

int waysWithUB(int a, int ub, int primes[])
{
    if (a == 0) {
        return 1;
    }
    else if (a == 1){
        return 0;
    }
    
    int cnt = 0;
    int residue;
    for (int pos = locateGreatestPrime((a < ub) ? a:ub, primes); pos > -1; pos--)
    {
        residue = a - primes[pos];
        cnt += waysWithUB(residue, primes[pos], primes);
    }
    return cnt;
}
*/

//=========================== Problem 78 ===========================
//Title: Coin partitions
/*
 Start date: 4/4/2016
 Finish date:
 
 Description:
 Let p(n) represent the number of different ways in which n coins can be separated into piles. For example, five coins can be separated into piles in exactly seven different ways, so p(5)=7.
 
 OOOOO
 OOOO   O
 OOO   OO
 OOO   O   O
 OO   OO   O
 OO   O   O   O
 O   O   O   O   O
 Find the least value of n for which p(n) is divisible by one million.
 */
//Solution:
//#include <ctime>
//#include <iostream>
//const int LIMIT = 30001;
//
//int numPartitions(int n);
//int waysLookUp(int *ways, int n, int ub);
//int locate(int n, int ub);
//int waysWithUB(int *ways, int a, int ub);
//
//int main()
//{
//    clock_t start = clock();
//    using namespace std;
//    int *ways = new int [(LIMIT * LIMIT + 1) >> 1];
//    for (int i = 0; i < (LIMIT * LIMIT + 1) >> 1; i++) {
//        ways[i] = 0;
//    }
//    ways[0] = 1;
//    ways[1] = 1;
//    ways[2] = 1;
//    
//    int i, w = 1;
//    for (i = 10000; i < 30001; i++) {
//        w = waysWithUB(ways, i, i);
//        cout << i << " " << w << "\n";
//        if (w == 0) {
//            cout << "THANK GOD!!! IT'S DONE!!!\n";
//            break;
//        }
//        
//    }
//    cout << "Time consumed: " << double(clock()-start)/CLOCKS_PER_SEC << "s\n";
//}
//
//int waysLookUp(int *ways, int n, int ub)
//{
//    return ways[locate(n, ub)];
//}
//
//int locate(int n, int ub)
//{
//    if (ub >= n) {
//        return ((n+1)*(n+2) >> 1) - 1;
//    }
//    else
//        return (n*(n+1) >> 1) + ub;
//}
//
//int waysWithUB(int *ways, int a, int ub)
//{
//    if (waysLookUp(ways, a, ub))
//        return waysLookUp(ways, a, ub);
//    else
//    {
//        int residue;
//        int cnt = 0;
//        for (int i = (a < ub) ? a:ub; i > 0; i--) {
//            residue = a - i;
//            cnt = (cnt + waysWithUB(ways, residue, i))%1000000;
//        }
//        ways[locate(a, ub)] = cnt;
//        return cnt;
//    }
//}

//=========================== Problem 81 ===========================
//Title: Path sum: two ways
/*
 Start date: 4/4/2016
 Finish date: 4/4/2016
 
 Description:
 https://projecteuler.net/problem=81
 */
//Solution:
/*
#include <ctime>
#include <iostream>
#include <fstream>

int main()
{
    using namespace std;
    clock_t start = clock();
    int mat[80][80];
    char x;
    ifstream fin("problem 81.txt");
    for (int i = 0; i < 80; i++) {
        for (int j = 0; j < 79; j++) {
            fin >> mat[i][j];
            fin >> x;
        }
        fin >> mat[i][79];
    }
    fin.close();
    for (int i = 1; i < 80; i++) {
        mat[0][i] += mat[0][i-1];
        mat[i][0] += mat[i-1][0];
    }
    for (int i = 1; i < 80; i++) {
        for (int j = 1; j < 80; j++) {
            mat[i][j] += (mat[i-1][j] < mat[i][j-1]) ? mat[i-1][j] : mat[i][j-1];
        }
    }
    cout << mat[79][79] << "\n";
    cout << double(clock()-start)/CLOCKS_PER_SEC << "s\n";
}
*/

//=========================== Problem 82 ===========================
//Title: Path sum: three ways
/*
 Start date: 4/4/2016
 Finish date: 4/4/2016
 
 Description:
 https://projecteuler.net/problem=82
 */
//Solution:
/*
#include <ctime>
#include <iostream>
#include <fstream>

void go(int mat[80][80], int col);

int main()
{
    using namespace std;
    clock_t start = clock();
    int mat[80][80];
    char x;
    ifstream fin("problem 82.txt");
    for (int i = 0; i < 80; i++) {
        for (int j = 0; j < 79; j++) {
            fin >> mat[i][j];
            fin >> x;
        }
        fin >> mat[i][79];
    }
    fin.close();
    for (int i = 1; i < 80; i++) {
        go(mat, i);
    }
    int min = mat[0][79];
    for (int i = 1; i < 80; i++) {
        min = (min < mat[i][79]) ? min : mat[i][79];
    }
    cout << min << "\n";
    cout << double(clock()-start)/CLOCKS_PER_SEC << "s\n";
}

void go(int mat[80][80], int col)
{
    int temp[80];
    for (int i = 0; i < 80; i++) {
        int s[80];
        int sum;
        for (int j = i; j > -1; j--) {
            sum = 0;
            for (int k = i; k >= j; k--) {
                sum += mat[k][col];
            }
            s[j] = sum + mat[j][col-1];
        }
        for (int j = i; j < 80; j++) {
            sum = 0;
            for (int k = i; k <= j; k++) {
                sum += mat[k][col];
            }
            s[j] = sum + mat[j][col-1];
        }
        temp[i] = s[0];
        for (int j = 1; j < 80; j++) {
            temp[i] = (temp[i] < s[j]) ? temp[i] : s[j];
        }
    }
    for (int i = 0; i < 80; i++) {
        mat[i][col] = temp[i];
    }
}
*/

//=========================== Problem 206 ===========================
//Title: Concealed Square
/*
 Start date: 4/4/2016
 Finish date: 4/4/2016
 
 Description:
 Find the unique positive integer whose square has the form 1_2_3_4_5_6_7_8_9_0,
 where each “_” is a single digit.
 */
//Solution:
/*
#include <iostream>

int main()
{
    long long sq, i;
    
    for (i = 1010101010; i < 1389026623; i++) {
        sq = i*i;
        if (sq % 10 == 0) {
            sq /= 100;
            if (sq % 10 == 9) {
                sq /= 100;
                if (sq % 10 == 8) {
                    sq /= 100;
                    if (sq % 10 == 7) {
                        sq /= 100;
                        if (sq % 10 == 6) {
                            sq /= 100;
                            if (sq % 10 == 5) {
                                sq /= 100;
                                if (sq % 10 == 4) {
                                    sq /= 100;
                                    if (sq % 10 == 3) {
                                        sq /= 100;
                                        if (sq % 10 == 2) {
                                            std::cout << i;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
*/
 
//=========================== Problem 243 ===========================
//Title: Resilience
/*
 Start date: 4/8/2016
 Finish date: 4/8/2016
 
 Description:
 A positive fraction whose numerator is less than its denominator is called a proper fraction.
 For any denominator, d, there will be d−1 proper fractions; for example, with d = 12:
 1/12 , 2/12 , 3/12 , 4/12 , 5/12 , 6/12 , 7/12 , 8/12 , 9/12 , 10/12 , 11/12 .
 
 We shall call a fraction that cannot be cancelled down a resilient fraction.
 Furthermore we shall define the resilience of a denominator, R(d), to be the ratio of its proper fractions that are resilient; for example, R(12) = 4/11 .
 In fact, d = 12 is the smallest denominator having a resilience R(d) < 4/10 .
 
 Find the smallest denominator d, having a resilience R(d) < 15499/94744 .
 */
//Solution:
/*
 //It is said that this problem is based on problem 69.
 //This problem really makes me annoyed, for the code is revised for two times.
 //Euler Phi function is used, and it seems to be the only way to success.
 
#include <iostream>
#include <fstream>
#include <cmath>

int locateGreatestPrime(int a, int primes[])
{
    //return i, where primes[i] <= a;
    int i = a / log(a);
    while (primes[i] < a) {
        i++;
    }
    while (primes[i] > a) {
        i--;
    }
    return i;
}

int main()
{
    using namespace std;
    
    int *primes = (int *)malloc(10008 * sizeof(int));
    ifstream fin("primes.txt");
    for (int i = 0; i < 1000000; i++) {
        fin >> primes[i];
    }
    fin.close();
    
    double bound = 15499.0/94744.0;
    
    int i;
    double a, b;
    for (i = 3;;i++)
    {
        a = 1.0, b = 1.0;
        for (int j = 0; j < i; j++) {
            a *= (primes[j] - 1.0);
            b *= primes[j];
        }
        cout  << a/(b - 1.0) << "\n";
        if (a/(b - 1.0) < bound) {
            cout  << i << " " << a/(b - 1.0) << "\n";
            break;
        }
    }
    i--;
    a /= primes[i] - 1;
    b /= primes[i];
    
    for (int i = 4; i < primes[i]; i++) {
        if (locateGreatestPrime(i, primes) == i) {
            continue;
        }
        if ((a * i)/(b * i - 1.0) < bound) {
            long result = long(b * i);
            cout << "i = " << i << "\nThe final result is: " << result << "\n";
            break;
        }
    }
}
*/

//=========================== Problem # ===========================
//Title:
/*
 Start date:
 Finish date:
 
 Description:
 
 */
//Solution:
